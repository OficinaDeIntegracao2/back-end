generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROFESSOR
  VOLUNTEER
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role
  professor Professor?
  volunteer Volunteer?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model Professor {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [id], references: [id], onDelete: Cascade)
  subjects    Subject[]
  certificate Certificate[]

  @@map("professors")
}

model Volunteer {
  id          String               @id @default(uuid())
  user        User                 @relation(fields: [id], references: [id], onDelete: Cascade)
  hourLogs    HourLog[]
  hourChanges HourChange[]
  subjects    VolunteerToSubject[]

  @@map("volunteers")
}

model Student {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  enrollments  Enrollment[]
  hourLogs     HourLog[]
  certificates Certificate[]

  @@map("students")
}

model Subject {
  id            String               @id @default(uuid())
  name          String               @unique
  description   String
  weekdays      String
  startTime     String               @map("start_time")
  endTime       String               @map("end_time")
  durationWeeks String               @map("duration_weeks")
  totalHours    Float                @map("total_hours")
  professor     Professor            @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId   String               @map("professor_id")
  enrollments   Enrollment[]
  hourLogs      HourLog[]
  certificates  Certificate[]
  volunteers    VolunteerToSubject[]
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  @@map("subjects")
}

model VolunteerToSubject {
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId String
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  assignedAt  DateTime  @default(now()) @map("assigned_at")

  @@id([volunteerId, subjectId])
  @@map("volunteers_to_subjects")
}

model Enrollment {
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String   @map("student_id")
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  String   @map("subject_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([studentId, subjectId])
  @@map("enrollments")
}

model HourLog {
  id         String       @id @default(uuid())
  student    Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  String       @map("student_id")
  subject    Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  String       @map("subject_id")
  hours      Float
  date       DateTime
  loggedBy   Volunteer    @relation(fields: [loggedById], references: [id], onDelete: Cascade)
  loggedById String       @map("logged_by_id")
  changes    HourChange[]

  @@map("hour_logs")
}

model HourChange {
  id            String    @id @default(uuid())
  hourLog       HourLog   @relation(fields: [hourLogId], references: [id], onDelete: Cascade)
  hourLogId     String    @map("hour_log_id")
  previousHours Float     @map("previous_hours")
  newHours      Float     @map("new_hours")
  changedAt     DateTime  @default(now()) @map("changed_at")
  changedBy     Volunteer @relation(fields: [changedById], references: [id], onDelete: Cascade)
  changedById   String    @map("changed_by_id")

  @@map("hour_changes")
}

model Certificate {
  id          String    @id @default(uuid())
  student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String    @map("student_id")
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String    @map("subject_id")
  totalHours  Float     @map("total_hours")
  issuedAt    DateTime  @default(now()) @map("issued_at")
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  professorId String    @map("professor_id")

  @@map("certificates")
}
